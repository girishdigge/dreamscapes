#!/bin/bash

echo "🌙 Setting up Complete Dreamscapes MVP Structure..."
echo "=================================================="

# Create root directory structure
mkdir -p dreamscapes/{docs,sample_dreams,assets/{demo-videos,screenshots,logos}}

cd dreamscapes

# Create services structure with next-app
mkdir -p services/frontend/next-app/{app/{components/ui},public}
mkdir -p services/express/{routes,middleware,utils,tests}
mkdir -p services/mcp-gateway/{config,services,utils}
mkdir -p services/llama-stylist/{services,utils,tests,models}
mkdir -p services/render-worker/{puppeteer/templates,ffmpeg/configs,storage/{temp,exports}}

echo "📁 Directory structure created!"

# Create root files
cat > .gitignore << 'EOF'
# Dependencies
node_modules/
*/node_modules/
__pycache__/
*.pyc
.pyo

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
.next/
dist/
build/
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Docker
docker-compose.override.yml

# Cache
.cache/
*.cache

# Temporary files
temp/
tmp/
*.tmp

# Model files (large)
services/llama-stylist/models/*.bin
services/llama-stylist/models/*.safetensors

# Exports
services/render-worker/storage/exports/*.mp4
services/render-worker/storage/exports/*.webm
EOF

cat > README.md << 'EOF'
# 🌙 Dreamscapes - Interactive Dream Film Generator

Transform your wildest dreams into cinematic 3D experiences using AI and modern web technologies.

## 🚀 Quick Start

```bash
# Clone and setup
git clone <your-repo>
cd dreamscapes
./setup.sh

# Configure environment
cp .env.example .env
# Edit .env with your API keys

# Start services
docker-compose up --build

# Open app
open http://localhost:3000
```

## 🏗️ Architecture

- **Frontend (Next.js + R3F)**: `services/frontend/next-app/`
- **Express Orchestrator**: `services/express/`
- **MCP Gateway**: `services/mcp-gateway/`
- **LLaMA Stylist**: `services/llama-stylist/`

## 🎬 Features

- ✅ Text → 3D Dream Generation
- ✅ 5 Visual Styles (ethereal, cyberpunk, surreal, fantasy, nightmare)
- ✅ Cinematic Camera System
- ✅ Live Dream Editing
- ✅ Video Export (WebM/MP4)
- ✅ Fallback System

## 🛠️ Development

```bash
# Frontend only
cd services/frontend/next-app
npm run dev

# Backend services
docker-compose up mcp-gateway express llama-stylist
```

## 📖 Documentation

- [API Documentation](docs/API.md)
- [Schema Reference](docs/schema.md)
- [Deployment Guide](docs/deployment.md)

---
Made with 🌙 by the Dreamscapes team
EOF

cat > .env.example << 'EOF'
# Dreamscapes Environment Configuration
NODE_ENV=development

# Cerebras API (Primary LLM)
CEREBRAS_API_KEY=your_cerebras_api_key_here
CEREBRAS_API_URL=https://api.cerebras.ai/v1/chat/completions

# OpenAI API (Fallback)
OPENAI_API_KEY=your_openai_api_key_here

# Service URLs
MCP_GATEWAY_URL=http://mcp-gateway:8080
LLAMA_URL=http://llama-stylist:8000
EXPRESS_URL=http://express:8000

# Frontend
NEXT_PUBLIC_API_URL=http://localhost:8000

# Optional Services
RENDER_WORKER_URL=http://render-worker:8001
REDIS_URL=redis://redis:6379

# Configuration
MAX_CACHE_SIZE=100
DEFAULT_RENDER_QUALITY=draft
ENABLE_FALLBACK_DEMOS=true
EOF

# Create Docker Compose
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  frontend:
    build: ./services/frontend/next-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - express
    restart: unless-stopped

  express:
    build: ./services/express
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MCP_GATEWAY_URL=http://mcp-gateway:8080
      - PORT=8000
    depends_on:
      - mcp-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mcp-gateway:
    build: ./services/mcp-gateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - CEREBRAS_API_URL=${CEREBRAS_API_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLAMA_URL=http://llama-stylist:8000
    depends_on:
      - llama-stylist
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  llama-stylist:
    build: ./services/llama-stylist
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  default:
    driver: bridge
EOF

echo "📦 Creating package.json files..."

# Frontend Next.js package.json
cat > services/frontend/next-app/package.json << 'EOF'
{
  "name": "dreamscapes-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "^18",
    "react-dom": "^18",
    "@react-three/fiber": "^8.15.0",
    "@react-three/drei": "^9.88.0",
    "three": "^0.158.0",
    "file-saver": "^2.0.5"
  },
  "devDependencies": {
    "tailwindcss": "^3.3.6",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "eslint": "^8",
    "eslint-config-next": "14.0.0"
  }
}
EOF

# Express package.json
cat > services/express/package.json << 'EOF'
{
  "name": "dreamscapes-express",
  "version": "1.0.0",
  "description": "Express orchestrator for Dreamscapes",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "node-fetch": "^2.6.7",
    "cors": "^2.8.5",
    "ajv": "^8.12.0",
    "dotenv": "^16.0.3",
    "uuid": "^9.0.0",
    "helmet": "^7.1.0",
    "compression": "^1.7.4"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  }
}
EOF

# MCP Gateway package.json
cat > services/mcp-gateway/package.json << 'EOF'
{
  "name": "dreamscapes-mcp-gateway",
  "version": "1.0.0",
  "description": "MCP Gateway for Dreamscapes",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "node-fetch": "^2.6.7",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "helmet": "^7.1.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
EOF

# LLaMA FastAPI requirements.txt
cat > services/llama-stylist/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6
numpy==1.24.3
torch==2.1.0
transformers==4.35.0
EOF

echo "🐳 Creating Dockerfiles..."

# Frontend Dockerfile
cat > services/frontend/next-app/Dockerfile << 'EOF'
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm run build

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "server.js"]
EOF

# Express Dockerfile
cat > services/express/Dockerfile << 'EOF'
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8000
CMD ["npm", "start"]
EOF

# MCP Gateway Dockerfile
cat > services/mcp-gateway/Dockerfile << 'EOF'
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD ["npm", "start"]
EOF

# LLaMA Dockerfile
cat > services/llama-stylist/Dockerfile << 'EOF'
FROM python:3.10-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8000
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

echo "📄 Creating configuration files..."

# Next.js config
cat > services/frontend/next-app/next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  transpilePackages: ['three'],
  output: 'standalone',
  webpack: (config) => {
    config.externals.push({
      'utf-8-validate': 'commonjs utf-8-validate',
      'bufferutil': 'commonjs bufferutil',
    });
    return config;
  },
};

module.exports = nextConfig;
EOF

# Tailwind config
cat > services/frontend/next-app/tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      animation: {
        'float': 'float 6s ease-in-out infinite',
        'glow': 'glow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-10px)' },
        },
        glow: {
          '0%': { boxShadow: '0 0 5px rgba(59, 130, 246, 0.5)' },
          '100%': { boxShadow: '0 0 20px rgba(59, 130, 246, 0.8)' },
        }
      }
    },
  },
  plugins: [],
};
EOF

# PostCSS config
cat > services/frontend/next-app/postcss.config.js << 'EOF'
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
EOF

# ESLint config
cat > services/frontend/next-app/.eslintrc.json << 'EOF'
{
  "extends": "next/core-web-vitals"
}
EOF

echo "📚 Creating sample dreams..."

cat > sample_dreams/ethereal_library.json << 'EOF'
{
  "text": "A floating library where books fly around like birds, spelling out messages of hope in the sky while soft light emanates from their pages",
  "style": "ethereal",
  "expectedDuration": 30
}
EOF

cat > sample_dreams/cyberpunk_garden.json << 'EOF'
{
  "text": "Neon butterflies dance around a crystalline tower in a digital void, their wings leaving trails of code that forms into blooming flowers",
  "style": "cyberpunk", 
  "expectedDuration": 25
}
EOF

cat > sample_dreams/surreal_house.json << 'EOF'
{
  "text": "A house that grows like a tree with rooms as leaves, floating in cotton candy clouds while impossible staircases spiral into infinity",
  "style": "surreal",
  "expectedDuration": 35
}
EOF

echo "📋 Creating schema file..."
cat > docs/dream-schema.json << 'EOF'
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Dream Scene Schema",
  "description": "Schema for generated dream scenes",
  "required": ["id", "title", "style"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the dream"
    },
    "title": {
      "type": "string",
      "description": "Human-readable title of the dream"
    },
    "style": {
      "type": "string",
      "enum": ["ethereal", "cyberpunk", "surreal", "fantasy", "nightmare"],
      "description": "Visual style of the dream"
    }
  }
}
EOF

echo "✅ Complete MVP structure created!"
echo ""
echo "🔧 Next steps:"
echo "1. Copy the component files to services/frontend/next-app/app/components/"
echo "2. Edit .env file with your API keys"
echo "3. Run: docker-compose up --build"
echo "4. Open: http://localhost:3000"
echo ""
echo "📁 Structure:"
echo "services/"
echo "  frontend/next-app/     <- Next.js app here"
echo "  express/               <- API orchestrator"
echo "  mcp-gateway/           <- LLM proxy"
echo "  llama-stylist/         <- Python service"
echo ""
echo "🌙 Your organized MVP is ready!"